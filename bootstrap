#!/bin/bash
#
#   For brand new AWS accounts, this script will configure the account alias
#   prior to applying Terraform. It will exit if the state bucket already
#   exists.
#
set -e -o pipefail

usage() {
    echo "Usage: $0 <account-alias> <region>"
    exit 1
}
[[ -z $1 || -z $2 ]] && usage
set -u

# This repo is a template to be cloned into other repos
# When it is used several files should be removed that are part of the repo but should not be included
# in the new repo. This section asks if the user want's to remove the files.
if [ -d .git ]; then
    while true; do
      read -rp "Do you wish to remove the template repo's config files before continuing? " yn
      case $yn in
        [Yy]* )
            echo "Removing files: .git LICENSE .circleci .gitignore .markdownlintrc .pre-commit-config.yaml"
            rm -rf .git LICENSE .circleci .gitignore .markdownlintrc .pre-commit-config.yaml
            break;;
        [Nn]* ) break;;
        * ) echo "Please answer yes or no.";;
      esac
    done
fi

readonly account_alias=$1
readonly region=$2

readonly state_bucket=${account_alias}-tf-state-${region}
readonly logging_bucket=${account_alias}-tf-state-log-${region}
readonly tfvars_file=terraform.tfvars

# If you are running this with aws-vault and using sessions so you can
# assume roles cross-account with MFA enabled you will want to run an
# arbitrary aws command to instanstiate a session before we need to examine output.
if [[ -z "${AWS_VAULT_NO_SESSION+x}" || "${AWS_VAULT_NO_SESSION}" != "true" ]]; then
    aws s3 ls
fi

bucket_exists() {
    bucket=$1
    output=$(aws s3 ls "s3://$bucket/" 2>&1)
    exit_code="$?"
    status=$(echo "$output" | grep -o 'bucket does not exist') || true
    if [[ -z "$status" && "$exit_code" -gt 0 ]]; then
        echo "$output"
        exit 1
    fi
    [[ $status != 'bucket does not exist' ]]
}

# Bail out if the state bucket already exists
if bucket_exists "$state_bucket"; then
    set +x
    echo -e '\nLooks like the bucket '"$state_bucket"' already exists!'
    exit 1
fi

# Bail out if the logging bucket already exists
if bucket_exists "$logging_bucket"; then
    set +x
    echo -e '\nLooks like the bucket '"$logging_bucket"' already exists!'
    exit 1
fi

current_alias=$(aws iam list-account-aliases --query 'AccountAliases' --output text)
if [[ -z $current_alias ]]; then
    echo "Setting account alias to $account_alias"
    aws iam create-account-alias --account-alias "$account_alias"
elif [[ $current_alias != "$account_alias" ]]; then
    echo "Current alias '$current_alias' does not match '$account_alias'!"
    exit 1
fi

# Generate terraform.tfvars with user settings
rm -f $tfvars_file
{
    echo "region = \"$region\""
    echo "state_bucket = \"$state_bucket\""
    echo "logging_bucket = \"$logging_bucket\""
} >> $tfvars_file
terraform fmt $tfvars_file > /dev/null

# Create resources
terraform init
terraform apply -auto-approve

# Save the region and local state
echo
echo
echo "To complete the bootstrap process, you must commit the terraform state files to source control. For example:"
echo "git add $tfvars_file terraform.tfstate && git commit -m -n 'Bootstrapped Terraform remote state setup' && git push"

#!/bin/bash
#
#   For brand new AWS accounts, this script will configure the account alias
#   prior to applying Terraform. It will only run if the alias and bucket do
#   not exist.
#
set -e -o pipefail

usage() {
    echo "Usage: $0 <account-alias> <region> <logging_bucket>"
    exit 1
}
[[ -z $1 || -z $2 || -z $3 ]] && usage
set -u

readonly account_alias=$1
readonly region=$2
readonly logging_bucket=$3

readonly bucket=${account_alias}-terraform-state-${region}
readonly tfvars_file=terraform.tfvars

# Bail out if the bucket already exists
status=$(aws s3 ls "s3://$bucket/" 2>&1 | grep -o 'bucket does not exist') || true
if [[ $status != 'bucket does not exist' ]]; then
    set +x
    echo -e '\nLooks like the bucket '"$bucket"' already exists!'
    exit 1
fi

current_alias=$(aws iam list-account-aliases --query 'AccountAliases' --output text)
if [[ -z $current_alias ]]; then
    echo "Setting account alias to $account_alias"
    aws iam create-account-alias --account-alias "$account_alias"
elif [[ $current_alias != "$account_alias" ]]; then
    echo "Current alias '$current_alias' does not match '$account_alias'!"
    exit 1
fi

# Generate terraform.tfvars with the chosen AWS region
rm -f $tfvars_file
echo "region = \"$region\"" >> $tfvars_file
echo "logging_bucket = \"$logging_bucket\"" >> $tfvars_file
terraform fmt $tfvars_file > /dev/null

# Create resources
terraform init
terraform apply -auto-approve

# Save the region and local state
git add "$tfvars_file" terraform.tfstate
git commit -m "Bootstrapped Terraform remote state setup"

echo
echo
echo "To complete the bootstrap process, push these changes to your repo!"
